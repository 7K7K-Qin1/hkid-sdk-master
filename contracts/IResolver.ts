/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IResolverInterface extends utils.Interface {
  functions: {
    "addKeys(string[])": FunctionFragment;
    "get(string,uint256)": FunctionFragment;
    "getByHash(uint256,uint256)": FunctionFragment;
    "getKey(uint256)": FunctionFragment;
    "getMany(string[],uint256)": FunctionFragment;
    "getManyByHash(uint256[],uint256)": FunctionFragment;
    "getName(address)": FunctionFragment;
    "getNftName(address,uint256)": FunctionFragment;
    "getlink(uint256,uint256)": FunctionFragment;
    "getlinks(uint256,uint256[])": FunctionFragment;
    "setByHash(uint256,string,uint256)": FunctionFragment;
    "setManyByHash(uint256[],string[],uint256)": FunctionFragment;
    "setName(address,uint256)": FunctionFragment;
    "setNftName(address,uint256,uint256)": FunctionFragment;
    "setlink(uint256,uint256,uint256)": FunctionFragment;
    "setlinks(uint256,uint256[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addKeys"
      | "get"
      | "getByHash"
      | "getKey"
      | "getMany"
      | "getManyByHash"
      | "getName"
      | "getNftName"
      | "getlink"
      | "getlinks"
      | "setByHash"
      | "setManyByHash"
      | "setName"
      | "setNftName"
      | "setlink"
      | "setlinks"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addKeys",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getByHash",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMany",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getManyByHash",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNftName",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getlink",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getlinks",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setByHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setManyByHash",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftName",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setlink",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setlinks",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNftName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getlinks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setByHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNftName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setlinks", data: BytesLike): Result;

  events: {
    "NewKey(string,string)": EventFragment;
    "Set(uint256,uint256,string)": EventFragment;
    "SetLink(uint256,uint256,uint256)": EventFragment;
    "SetName(address,uint256)": EventFragment;
    "SetNftName(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftName"): EventFragment;
}

export interface NewKeyEventObject {
  keyIndex: string;
  key: string;
}
export type NewKeyEvent = TypedEvent<[string, string], NewKeyEventObject>;

export type NewKeyEventFilter = TypedEventFilter<NewKeyEvent>;

export interface SetEventObject {
  tokenId: BigNumber;
  keyHash: BigNumber;
  value: string;
}
export type SetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  SetEventObject
>;

export type SetEventFilter = TypedEventFilter<SetEvent>;

export interface SetLinkEventObject {
  tokenId: BigNumber;
  keyHash: BigNumber;
  value: BigNumber;
}
export type SetLinkEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SetLinkEventObject
>;

export type SetLinkEventFilter = TypedEventFilter<SetLinkEvent>;

export interface SetNameEventObject {
  addr: string;
  tokenId: BigNumber;
}
export type SetNameEvent = TypedEvent<[string, BigNumber], SetNameEventObject>;

export type SetNameEventFilter = TypedEventFilter<SetNameEvent>;

export interface SetNftNameEventObject {
  nftAddr: string;
  nftTokenId: BigNumber;
  tokenId: BigNumber;
}
export type SetNftNameEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SetNftNameEventObject
>;

export type SetNftNameEventFilter = TypedEventFilter<SetNftNameEvent>;

export interface IResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addKeys(
      keys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    get(
      key: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getKey(
      keyHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMany(
      keys: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    getName(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNftName(
      nftAddr: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { values: BigNumber[] }>;

    setByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      addr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftName(
      nft: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      nameTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addKeys(
    keys: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  get(
    key: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getByHash(
    keyHash: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getKey(
    keyHash: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMany(
    keys: PromiseOrValue<string>[],
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getManyByHash(
    keyHashes: PromiseOrValue<BigNumberish>[],
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getName(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNftName(
    nftAddr: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getlink(
    source: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getlinks(
    source: PromiseOrValue<BigNumberish>,
    targets: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  setByHash(
    keyHash: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManyByHash(
    keyHashes: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<string>[],
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    addr: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftName(
    nft: PromiseOrValue<string>,
    nftTokenId: PromiseOrValue<BigNumberish>,
    nameTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setlink(
    source: PromiseOrValue<BigNumberish>,
    target: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setlinks(
    source: PromiseOrValue<BigNumberish>,
    targets: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKeys(
      keys: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    get(
      key: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getKey(
      keyHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMany(
      keys: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getName(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftName(
      nftAddr: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    setByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      addr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftName(
      nft: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      nameTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewKey(string,string)"(
      keyIndex?: PromiseOrValue<string> | null,
      key?: null
    ): NewKeyEventFilter;
    NewKey(
      keyIndex?: PromiseOrValue<string> | null,
      key?: null
    ): NewKeyEventFilter;

    "Set(uint256,uint256,string)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      keyHash?: PromiseOrValue<BigNumberish> | null,
      value?: null
    ): SetEventFilter;
    Set(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      keyHash?: PromiseOrValue<BigNumberish> | null,
      value?: null
    ): SetEventFilter;

    "SetLink(uint256,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      keyHash?: PromiseOrValue<BigNumberish> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): SetLinkEventFilter;
    SetLink(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      keyHash?: PromiseOrValue<BigNumberish> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): SetLinkEventFilter;

    "SetName(address,uint256)"(
      addr?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SetNameEventFilter;
    SetName(
      addr?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SetNameEventFilter;

    "SetNftName(address,uint256,uint256)"(
      nftAddr?: PromiseOrValue<string> | null,
      nftTokenId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SetNftNameEventFilter;
    SetNftName(
      nftAddr?: PromiseOrValue<string> | null,
      nftTokenId?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): SetNftNameEventFilter;
  };

  estimateGas: {
    addKeys(
      keys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    get(
      key: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      keyHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMany(
      keys: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getName(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftName(
      nftAddr: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      addr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftName(
      nft: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      nameTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKeys(
      keys: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    get(
      key: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKey(
      keyHash: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMany(
      keys: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftName(
      nftAddr: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setByHash(
      keyHash: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManyByHash(
      keyHashes: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<string>[],
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      addr: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftName(
      nft: PromiseOrValue<string>,
      nftTokenId: PromiseOrValue<BigNumberish>,
      nameTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setlink(
      source: PromiseOrValue<BigNumberish>,
      target: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setlinks(
      source: PromiseOrValue<BigNumberish>,
      targets: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
